(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var bend, divide, each_grow, length2, minus, multiply, plus, _ref;

_ref = require("./quaternion"), plus = _ref.plus, minus = _ref.minus, multiply = _ref.multiply, divide = _ref.divide, length2 = _ref.length2;

each_grow = function(origin, destination, path) {
  var course, end, factor, polyline, start, whole_course;
  start = path[0];
  end = path[path.length - 1];
  course = minus(end, start);
  whole_course = minus(destination, origin);
  factor = divide(whole_course, course);
  polyline = [];
  path.slice(1, -1).forEach(function(a) {
    var b, c;
    b = minus(a, start);
    c = multiply(b, factor);
    return polyline.push(plus(origin, c));
  });
  polyline.push(destination);
  return polyline;
};

bend = function(list, template) {
  var base_point, result;
  base_point = list[0];
  result = [base_point];
  list.slice(1).forEach(function(guide_point) {
    var segment, _ref1;
    if ((1 < (_ref1 = length2(guide_point, base_point)) && _ref1 < 800000)) {
      segment = each_grow(base_point, guide_point, template);
      result.push.apply(result, segment);
      return base_point = guide_point;
    }
  });
  return result;
};

exports.bend = bend;

},{"./quaternion":3}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var camera, canvas, delay, geometry, height, line, material, paint_point, polyline, ratio, render, renderer, scene, test, width;

console.log("loaded");

width = 1300;

height = 700;

scene = new THREE.Scene;

ratio = width / height;

camera = new THREE.PerspectiveCamera(45, ratio, 0.1, 800);

camera.position.set(0, 0, 400);

camera.lookAt(new THREE.Vector3(0, 0, 0));

renderer = new THREE.WebGLRenderer;

renderer.setSize(width, height);

canvas = renderer.domElement;

document.body.appendChild(canvas);

canvas.setAttribute("width", "" + width + "px");

canvas.setAttribute("height", "" + height + "px");

geometry = new THREE.CubeGeometry;

paint_point = function(a) {
  return geometry.vertices.push(new THREE.Vector3(a.x, a.y, a.z));
};

test = require("./test");

polyline = test.test_line();

polyline.forEach(paint_point);

material = new THREE.LineBasicMaterial({
  color: 0xccccff,
  linewidth: 1
});

line = new THREE.Line(geometry, material);

scene.add(line);

delay = function(t, f) {
  return setTimeout(f, t);
};

(render = function() {
  delay(100, function() {
    return requestAnimationFrame(render);
  });
  renderer.render(scene, camera);
  line.rotation.y += 0.02;
  return line.rotation.z += 0.003;
})();

},{"./test":4}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var conjugate, divide, length2, minus, multiply, norm, plus, square, sum4Square;

plus = function(a, b) {
  return {
    x: a.x + b.x,
    y: a.y + b.y,
    z: a.z + b.z,
    w: a.w + b.w
  };
};

minus = function(a, b) {
  return {
    x: a.x - b.x,
    y: a.y - b.y,
    z: a.z - b.z,
    w: a.w - b.w
  };
};

multiply = function(a, b) {
  return {
    x: (a.x * b.x) - (a.y * b.y) - (a.z * b.z) - (a.w * b.w),
    y: (a.x * b.y) + (a.y * b.x) + (a.z * b.w) - (a.w * b.z),
    z: (a.x * b.z) + (a.z * b.x) + (a.w * b.y) - (a.y * b.w),
    w: (a.x * b.w) + (a.w * b.x) + (a.y * b.z) - (a.z * b.y)
  };
};

conjugate = function(a) {
  return {
    x: a.x,
    y: -a.y,
    z: -a.z,
    w: -a.w
  };
};

square = function(a) {
  return a * a;
};

sum4Square = function(a) {
  var s4;
  s4 = square;
  return (s4(a.x)) + (s4(a.y)) + (s4(a.z)) + (s4(a.w));
};

length2 = function(a) {
  return sum4Square(a);
};

norm = function(a) {
  return Math.pow(length2(a), 0.5);
};

divide = function(a, b) {
  var c, d, realPart;
  c = conjugate(b);
  d = multiply(a, c);
  realPart = sum4Square(b);
  if (realPart === 0) {
    return {
      x: 0,
      y: 0,
      z: 0,
      w: 0
    };
  } else {
    return {
      x: d.x / realPart,
      y: d.y / realPart,
      z: d.z / realPart,
      w: d.z / realPart
    };
  }
};

exports.plus = plus;

exports.minus = minus;

exports.multiply = multiply;

exports.divide = divide;

exports.norm = norm;

exports.length2 = length2;

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var bend, data, fix, four, p1, p2, p3, p4, p5, three, _ref;

_ref = require("./three_quarter"), three = _ref.three, four = _ref.four;

bend = require("./bend").bend;

p1 = {
  x: -150,
  y: 0,
  z: 0
};

p2 = {
  x: -10,
  y: 0,
  z: 20
};

p3 = {
  x: 0,
  y: 120,
  z: 0
};

p4 = {
  x: 10,
  y: 0,
  z: -20
};

p5 = {
  x: 150,
  y: 0,
  z: 0
};

data = [p1, p2, p3, p4, p5].map(four);

fix = function(a) {
  return a.toFixed(1);
};

exports.test_line = function() {
  var result;
  result = data;
  [1, 2, 3, 4].forEach(function() {
    return result = bend(result, data);
  });
  return result;
};

},{"./bend":1,"./three_quarter":5}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
exports.three = function(a) {
  return {
    x: a.x,
    y: a.y,
    z: a.z
  };
};

exports.four = function(a) {
  return {
    x: a.x,
    y: a.y,
    z: a.z,
    w: 6
  };
};

},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
